# Terraform Provider release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    tags:
      - 'v*'

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Import GPG key
        run: |
          # Configure GPG for non-interactive use
          export GPG_TTY=$(tty)
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "max-cache-ttl 7200" >> ~/.gnupg/gpg-agent.conf
          echo "default-cache-ttl 7200" >> ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          
          # Import the private key
          echo "$GPG_PRIVATE_KEY" | gpg --import --batch --pinentry-mode loopback --passphrase ""
          echo "GPG key imported successfully"
          
          # Get the key ID for signing
          KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | sed 's/.*\/\([A-F0-9]*\) .*/\1/')
          echo "GPG_FINGERPRINT=$KEY_ID" >> $GITHUB_ENV
          echo "GPG_TTY=$GPG_TTY" >> $GITHUB_ENV
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ env.GPG_FINGERPRINT }}
          GPG_TTY: ${{ env.GPG_TTY }}
